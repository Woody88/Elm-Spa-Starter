var _user$project$App_State$pageErrored = F3(
	function (model, activePage, errorMessage) {
		var error = A2(_user$project$Page_Errored$pageLoadError, activePage, errorMessage);
		return A2(
			_user$project$Util_ops['=>'],
			_elm_lang$core$Native_Utils.update(
				model,
				{
					pageState: _user$project$App_Types$Loaded(
						_user$project$App_Types$Errored(error))
				}),
			_elm_lang$core$Platform_Cmd$none);
	});
var _user$project$App_State$pageSubscriptions = function (page) {
	var _p0 = page;
	switch (_p0.ctor) {
		case 'Blank':
			return _elm_lang$core$Platform_Sub$none;
		case 'Errored':
			return _elm_lang$core$Platform_Sub$none;
		case 'NotFound':
			return _elm_lang$core$Platform_Sub$none;
		default:
			return _elm_lang$core$Platform_Sub$none;
	}
};
var _user$project$App_State$sessionChange = _user$project$Ports$onSessionChange(
	function (_p1) {
		return _elm_lang$core$Result$toMaybe(
			A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Data_User$decoder, _p1));
	});
var _user$project$App_State$getPage = function (pageState) {
	var _p2 = pageState;
	if (_p2.ctor === 'Loaded') {
		return _p2._0;
	} else {
		return _p2._0;
	}
};
var _user$project$App_State$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _user$project$App_State$pageSubscriptions(
				_user$project$App_State$getPage(model.pageState)),
			_1: {
				ctor: '::',
				_0: A2(_elm_lang$core$Platform_Sub$map, _user$project$App_Types$SetUser, _user$project$App_State$sessionChange),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$App_State$setRoute = F2(
	function (maybeRoute, model) {
		var errored = _user$project$App_State$pageErrored(model);
		var transition = F2(
			function (toMsg, task) {
				return A2(
					_user$project$Util_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							pageState: _user$project$App_Types$TransitioningFrom(
								_user$project$App_State$getPage(model.pageState))
						}),
					A2(_elm_lang$core$Task$attempt, toMsg, task));
			});
		var _p3 = maybeRoute;
		if (_p3.ctor === 'Nothing') {
			return A2(
				_user$project$Util_ops['=>'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						pageState: _user$project$App_Types$Loaded(_user$project$App_Types$NotFound)
					}),
				_elm_lang$core$Platform_Cmd$none);
		} else {
			return A2(
				transition,
				_user$project$App_Types$HomeLoaded,
				_user$project$Page_Home$init(model.session));
		}
	});
var _user$project$App_State$updatePage = F3(
	function (page, msg, model) {
		var errored = _user$project$App_State$pageErrored(model);
		var toPage = F5(
			function (toModel, toMsg, subUpdate, subMsg, subModel) {
				var _p4 = A2(subUpdate, subMsg, subModel);
				var newModel = _p4._0;
				var newCmd = _p4._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pageState: _user$project$App_Types$Loaded(
								toModel(newModel))
						}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, toMsg, newCmd)
				};
			});
		var session = model.session;
		var _p5 = {ctor: '_Tuple2', _0: msg, _1: page};
		switch (_p5._0.ctor) {
			case 'SetRoute':
				return A2(_user$project$App_State$setRoute, _p5._0._0, model);
			case 'SetUser':
				var _p6 = _p5._0._0;
				var session = model.session;
				var cmd = ((!_elm_lang$core$Native_Utils.eq(session.user, _elm_lang$core$Maybe$Nothing)) && _elm_lang$core$Native_Utils.eq(_p6, _elm_lang$core$Maybe$Nothing)) ? _user$project$Route$modifyUrl(_user$project$Route$Home) : _elm_lang$core$Platform_Cmd$none;
				return A2(
					_user$project$Util_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							session: _elm_lang$core$Native_Utils.update(
								session,
								{user: _p6})
						}),
					cmd);
			case 'HomeLoaded':
				if (_p5._0._0.ctor === 'Ok') {
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								pageState: _user$project$App_Types$Loaded(
									_user$project$App_Types$Home(_p5._0._0._0))
							}),
						_elm_lang$core$Platform_Cmd$none);
				} else {
					return A2(
						_user$project$Util_ops['=>'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								pageState: _user$project$App_Types$Loaded(
									_user$project$App_Types$Errored(_p5._0._0._0))
							}),
						_elm_lang$core$Platform_Cmd$none);
				}
			default:
				switch (_p5._1.ctor) {
					case 'Home':
						return A5(
							toPage,
							_user$project$App_Types$Home,
							_user$project$App_Types$HomeMsg,
							_user$project$Page_Home$update(session),
							_p5._0._0,
							_p5._1._0);
					case 'NotFound':
						return A2(_user$project$Util_ops['=>'], model, _elm_lang$core$Platform_Cmd$none);
					default:
						return A2(_user$project$Util_ops['=>'], model, _elm_lang$core$Platform_Cmd$none);
				}
		}
	});
var _user$project$App_State$update = F2(
	function (msg, model) {
		return A3(
			_user$project$App_State$updatePage,
			_user$project$App_State$getPage(model.pageState),
			msg,
			model);
	});
var _user$project$App_State$decodeUserFromJson = function (json) {
	return A2(
		_elm_lang$core$Maybe$andThen,
		function (_p7) {
			return _elm_lang$core$Result$toMaybe(
				A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Data_User$decoder, _p7));
		},
		_elm_lang$core$Result$toMaybe(
			A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$core$Json_Decode$string, json)));
};
var _user$project$App_State$initialPage = _user$project$App_Types$Blank;
var _user$project$App_State$init = F2(
	function (val, location) {
		return A2(
			_user$project$App_State$setRoute,
			_user$project$Route$fromLocation(location),
			{
				pageState: _user$project$App_Types$Loaded(_user$project$App_State$initialPage),
				session: {
					user: _user$project$App_State$decodeUserFromJson(val)
				}
			});
	});
